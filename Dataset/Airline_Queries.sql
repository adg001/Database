 -- Stored Procedure for Details of economy class passengers with destination Â‘DFW'--
CREATE OR REPLACE PROCEDURE DFWECONOMYPASSENGERS AS 
CURSOR ECOPASSDETAILS is
select al.AL_NAME,fl.FLIGHT_CODE,p2.FNAME,p2.LNAME,p2.PASSPORTNO,t.CLASS,t.DATE_OF_TRAVEL,t.DESTINATION,t.SOURCE,t.SEATNO,t.TICKET_NUMBER from Airline al,Flight fl,PASSENGER1 p1,PASSENGER2 p2 ,PASSENGER3 p3,TICKET1 t
where al.AIRLINEID = fl.AIRLINEID
and  p1.PID= p3.PID
and  p1.PASSPORTNO =p2.PASSPORTNO
and fl.FLIGHT_CODE = p3.FLIGHT_CODE
and t.PASSPORTNO = p2.PASSPORTNO
and t.CLASS='ECONOMY' and t.DESTINATION='DFW';
 
PASSDETAILS ECOPASSDETAILS%rowtype;
 
BEGIN
 
Open ECOPASSDETAILS ;
   LOOP
    fetch ECOPASSDETAILS into PASSDETAILS;
     EXIT WHEN ECOPASSDETAILS%NOTFOUND;
   dbms_output.put_line (PASSDETAILS.AL_NAME || '  ' || PASSDETAILS.FLIGHT_CODE || '  ' || PASSDETAILS.FNAME || '  ' || PASSDETAILS.LNAME|| '  ' ||PASSDETAILS.PASSPORTNO || '  ' || PASSDETAILS.CLASS || '  ' || PASSDETAILS.SOURCE || '  ' || PASSDETAILS.SEATNO || '  ' || PASSDETAILS.TICKET_NUMBER);
   
    END LOOP;
     close ECOPASSDETAILS;
 END DFWECONOMYPASSENGERS;
 
 --Testing in sql developer: Oracle db--
 SET SERVEROUTPUT ON
 exec DFWECONOMYPASSENGERS();

-- Stored Procedure for flight details by status --
CREATE OR REPLACE PROCEDURE FLIGHTSBYSTATUS 
(
  IN_STATUS IN VARCHAR2
) AS 
 
CURSOR fSTATUS is
select  distinct f.FLIGHT_CODE ,al.AL_NAME ,f.ARRIVAL,f.departure,f.SOURCE,f.DESTINATION,f.STATUS,f.FLIGHTTYPE from Airline al ,Airport ap,flight f
where al.AIRLINEID=f.AIRLINEID
and  f.STATUS =IN_STATUS;
 
FlightStatus fSTATUS%rowtype;
  
BEGIN
  Open fSTATUS ;
   LOOP
    fetch fSTATUS into FlightStatus;
     EXIT WHEN fSTATUS%NOTFOUND;
   dbms_output.put_line (FlightStatus.FLIGHT_CODE || '  ' || FlightStatus.AL_NAME || '  ' || FlightStatus.ARRIVAL || '  ' || FlightStatus.departure|| '  ' ||FlightStatus.Source || '  ' || FlightStatus.DESTINATION || '  ' || FlightStatus.STATUS || '  ' || FlightStatus.FLIGHTTYPE);
   
    END LOOP;
     close fSTATUS;
END FLIGHTSBYSTATUS;
 
 --Testing in sql developer: Oracle db--
SET SERVEROUTPUT ON 
exec FLIGHTSBYSTATUS('Delayed');
-- or--
SET SERVEROUTPUT ON 
exec FLIGHTSBYSTATUS('On-time');
 

-- Trigger, when flight is delayed it is logged into different table--

CREATE OR REPLACE TRIGGER DELAYEDFLIGHTS 
AFTER INSERT ON FLIGHT 
FOR EACH ROW 
DECLARE

BEGIN
    if updating('STATUS')
    then
       insert into delayed_flights (FLIGHT_CODE, SOURCE, DESTINATION , AIRLINEID ,report_time) values(:new.flight_code,:new.source,:new.destination,:new.airlineid,sysdate);
end if;
 
END;

-- This is audit table for this trigger--
 CREATE TABLE "DELAYED_FLIGHTS" 
   (           "FLIGHT_CODE" VARCHAR2(20 BYTE), 
                "DESTINATION" VARCHAR2(20 BYTE), 
                "SOURCE" VARCHAR2(20 BYTE), 
                "AIRLINEID" VARCHAR2(20 BYTE), 
                "REPORT_TIME" DATE
   );
 

INSERT INTO FLIGHT(FLIGHT_CODE, SOURCE, DESTINATION, ARRIVAL, DEPARTURE, STATUS, DURATION, FLIGHTTYPE, LAYOVER_TIME, NO_OF_STOPS, AIRLINEID)
VALUES('AI127','BOM','DFW','02:10','03:15','Delayed','24hr','Connecting',3,1,'AI');



--TRIGGER TO UPDATE SALARY OF AN EMPLOYEE DEPENDING ON JOBTYPE--

CREATE OR REPLACE TRIGGER UPDATEDSalary AFTER
  INSERT OR
  UPDATE OF SALARY ON EMPLOYEE2
  FOR EACH ROW;
DECLARE 
JOBTYPE EMPLOYEE2.JOBTYPE%TYPE
BEGIN
  CASE
    WHEN (JOBTYPE= 'Administrative Support') THEN
      UPDATE EMPLOYEE2 SET SALARY=SALARY+SALARY*.10;
    WHEN (JOBTYPE= 'ENGINEER') THEN
      UPDATE EMPLOYEE2 SET SALARY=SALARY+SALARY*.05;
    WHEN (JOBTYPE= 'TRAFFIC MONITOR') THEN
      UPDATE EMPLOYEE2 SET SALARY=SALARY+SALARY*.25;
    WHEN (JOBTYPE= 'AIRPORT AUTHORITY') THEN
      UPDATE EMPLOYEE2 SET SALARY=SALARY+SALARY*.45;
  END CASE; 
END;


-- TRIGGER TO UPDATE 'TICKET_PRICE_HISTORY' TABLE WHEN THE PRICE OF AN AIR TICKET IS UPDATED IN TICKET2 TABLE--

-- CREATING TABLE TICKET_PRICE_HISTORY--

CREATE TABLE TICKET_PRICE_HISTORY
(DATE_OF_BOOKING DATE NOT NULL,
SOURCE VARCHAR(3) NOT NULL,
DESTINATION VARCHAR(3) NOT NULL,
CLASS VARCHAR2(15) NOT NULL,
PRICE INT,
PRIMARY KEY(DATE_OF_BOOKING, SOURCE, DESTINATION, CLASS));

-- CREATE A TRIGGER TICKET_PRICE_HISTORY --

CREATE OR REPLACE TRIGGER TICKET_PRICE_HISTORY
BEFORE UPDATE OF PRICE
ON TICKET2
FOR EACH ROW

BEGIN
INSERT INTO TICKET_PRICE_HISTORY 
VALUES(:OLD.DATE_OF_BOOKING, :OLD.SOURCE, :OLD:DESTINATION, :OLD.CLASS, :OLD.PRICE);

END;

--LET'S UPDATE A PRICE OR FARE OF AN AIR TICKET --

UPDATE TICKET2
SET PRICE=150000
WHERE DATE_OF_BOOKING ='11-NOV-16'
AND SOURCE='BOM'
AND DESTINATION='DFW'
AND CLASS='ECONOMY'
